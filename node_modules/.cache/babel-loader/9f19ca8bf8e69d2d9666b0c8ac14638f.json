{"ast":null,"code":"import _slicedToArray from \"G:\\\\WSN-7semest\\\\Podstawy projektowania stron\\\\react-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"G:\\\\WSN-7semest\\\\Podstawy projektowania stron\\\\react-project\\\\src\\\\meme\\\\Meme.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Meme } from \"./Singlememe\";\nimport './Meme.css';\n\nconst objectToQueryParam = obj => {\n  const params = Object.entries(obj).map(([key, value]) => `${key}=${value}`);\n  return \"?\" + params.join(\"&\");\n};\n\nfunction App() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        templates = _useState2[0],\n        setTemplates = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        template = _useState4[0],\n        setTemplate = _useState4[1];\n\n  const _useState5 = useState(\"\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        topText = _useState6[0],\n        setTopText = _useState6[1];\n\n  const _useState7 = useState(\"\"),\n        _useState8 = _slicedToArray(_useState7, 2),\n        bottomText = _useState8[0],\n        setBottomText = _useState8[1];\n\n  const _useState9 = useState(null),\n        _useState10 = _slicedToArray(_useState9, 2),\n        meme = _useState10[0],\n        setMeme = _useState10[1];\n\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then(x => x.json().then(response => setTemplates(response.data.memes)));\n  }, []);\n\n  if (meme) {\n    return React.createElement(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      style: {\n        width: 200\n      },\n      src: meme,\n      alt: \"custom meme\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }));\n  }\n\n  return React.createElement(\"div\", {\n    className: \"Memes\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, template && React.createElement(\"form\", {\n    onSubmit: async e => {\n      e.preventDefault();\n      const params = {\n        template_id: template.id,\n        text0: topText,\n        text1: bottomText,\n        username: \"xzk03017\",\n        password: \"xzk03017@cndps.com\"\n      };\n      const response = await fetch(`https://api.imgflip.com/caption_image${objectToQueryParam(params)}`);\n      const json = await response.json();\n      setMeme(json.data.url);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(Meme, {\n    template: template,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    placeholder: \"top text\",\n    value: topText,\n    onChange: e => setTopText(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    placeholder: \"bottom text\",\n    value: bottomText,\n    onChange: e => setBottomText(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"create meme\"))), !template && React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n    className: \"header-h1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Pick a template\"), templates.map(template => {\n    return React.createElement(Meme, {\n      template: template,\n      onClick: () => {\n        setTemplate(template);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    });\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["G:/WSN-7semest/Podstawy projektowania stron/react-project/src/meme/Meme.js"],"names":["React","useState","useEffect","Meme","objectToQueryParam","obj","params","Object","entries","map","key","value","join","App","templates","setTemplates","template","setTemplate","topText","setTopText","bottomText","setBottomText","meme","setMeme","fetch","then","x","json","response","data","memes","textAlign","width","e","preventDefault","template_id","id","text0","text1","username","password","url","target"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Meme } from \"./Singlememe\"\r\nimport './Meme.css'\r\nconst objectToQueryParam = obj => {\r\n    const params = Object.entries(obj).map(([key, value]) => `${key}=${value}`);\r\n    return \"?\" + params.join(\"&\");\r\n};\r\n\r\nfunction App() {\r\n    const [templates, setTemplates] = useState([]);\r\n    const [template, setTemplate] = useState(null);\r\n    const [topText, setTopText] = useState(\"\");\r\n    const [bottomText, setBottomText] = useState(\"\");\r\n    const [meme, setMeme] = useState(null);\r\n\r\n    useEffect(() => {\r\n        fetch(\"https://api.imgflip.com/get_memes\").then(x =>\r\n            x.json().then(response => setTemplates(response.data.memes))\r\n        );\r\n    }, []);\r\n\r\n    if (meme) {\r\n        return (\r\n            <div style={{ textAlign: \"center\" }}>\r\n                <img style={{ width: 200 }} src={meme} alt=\"custom meme\" />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"Memes\">\r\n            {template && (\r\n                <form\r\n                    onSubmit={async e => {\r\n                        e.preventDefault();\r\n                        const params = {\r\n                            template_id: template.id,\r\n                            text0: topText,\r\n                            text1: bottomText,\r\n                            username: \"xzk03017\",\r\n                            password: \"xzk03017@cndps.com\"\r\n                        };\r\n                        const response = await fetch(\r\n                            `https://api.imgflip.com/caption_image${objectToQueryParam(\r\n                                params\r\n                            )}`\r\n                        );\r\n                        const json = await response.json();\r\n                        setMeme(json.data.url);\r\n                    }}\r\n                >\r\n                    <Meme template={template} />\r\n                    <div>\r\n                        <input\r\n                            placeholder=\"top text\"\r\n                            value={topText}\r\n                            onChange={e => setTopText(e.target.value)}\r\n                        />\r\n                        <input\r\n                            placeholder=\"bottom text\"\r\n                            value={bottomText}\r\n                            onChange={e => setBottomText(e.target.value)}\r\n                        />\r\n                        <button type=\"submit\">create meme</button>\r\n                    </div>\r\n                </form>\r\n            )}\r\n            {!template && (\r\n                <>\r\n                    <h1 className=\"header-h1\">Pick a template</h1>\r\n                    {templates.map(template => {\r\n                        return (\r\n                            <Meme\r\n                                template={template}\r\n                                onClick={() => {\r\n                                    setTemplate(template);\r\n                                }}\r\n                            />\r\n                        );\r\n                    })}\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}